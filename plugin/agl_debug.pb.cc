// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agl_debug.proto

#include "agl_debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pose;
}  // namespace protobuf_pose_2eproto
namespace protobuf_vector2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2d;
}  // namespace protobuf_vector2d_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace gazebo {
namespace msgs {
class AglDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AglDebug>
      _instance;
} _AglDebug_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace protobuf_agl_5fdebug_2eproto {
static void InitDefaultsAglDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gazebo::msgs::_AglDebug_default_instance_;
    new (ptr) ::gazebo::msgs::AglDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gazebo::msgs::AglDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AglDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAglDebug}, {
      &protobuf_pose_2eproto::scc_info_Pose.base,
      &protobuf_vector2d_2eproto::scc_info_Vector2d.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AglDebug.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, elapsed_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, vehicle_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, current_agl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, average_agl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, terrain_pts_sz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gazebo::msgs::AglDebug, terrain_pts_),
  2,
  0,
  3,
  4,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gazebo::msgs::AglDebug)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gazebo::msgs::_AglDebug_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "agl_debug.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017agl_debug.proto\022\013gazebo.msgs\032\npose.pro"
      "to\032\016vector3d.proto\032\016vector2d.proto\032\ntime"
      ".proto\"\316\001\n\010AglDebug\022\024\n\014elapsed_time\030\001 \002("
      "\001\022\'\n\014vehicle_pose\030\002 \002(\0132\021.gazebo.msgs.Po"
      "se\022\023\n\013current_agl\030\003 \002(\001\022\023\n\013average_agl\030\004"
      " \002(\001\022-\n\016terrain_pts_sz\030\005 \002(\0132\025.gazebo.ms"
      "gs.Vector2d\022*\n\013terrain_pts\030\006 \003(\0132\025.gazeb"
      "o.msgs.Vector3d"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agl_debug.proto", &protobuf_RegisterTypes);
  ::protobuf_pose_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
  ::protobuf_vector2d_2eproto::AddDescriptors();
  ::protobuf_time_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_agl_5fdebug_2eproto
namespace gazebo {
namespace msgs {

// ===================================================================

void AglDebug::InitAsDefaultInstance() {
  ::gazebo::msgs::_AglDebug_default_instance_._instance.get_mutable()->vehicle_pose_ = const_cast< ::gazebo::msgs::Pose*>(
      ::gazebo::msgs::Pose::internal_default_instance());
  ::gazebo::msgs::_AglDebug_default_instance_._instance.get_mutable()->terrain_pts_sz_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
}
void AglDebug::clear_vehicle_pose() {
  if (vehicle_pose_ != NULL) vehicle_pose_->Clear();
  clear_has_vehicle_pose();
}
void AglDebug::clear_terrain_pts_sz() {
  if (terrain_pts_sz_ != NULL) terrain_pts_sz_->Clear();
  clear_has_terrain_pts_sz();
}
void AglDebug::clear_terrain_pts() {
  terrain_pts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AglDebug::kElapsedTimeFieldNumber;
const int AglDebug::kVehiclePoseFieldNumber;
const int AglDebug::kCurrentAglFieldNumber;
const int AglDebug::kAverageAglFieldNumber;
const int AglDebug::kTerrainPtsSzFieldNumber;
const int AglDebug::kTerrainPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AglDebug::AglDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_agl_5fdebug_2eproto::scc_info_AglDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.AglDebug)
}
AglDebug::AglDebug(const AglDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      terrain_pts_(from.terrain_pts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_pose()) {
    vehicle_pose_ = new ::gazebo::msgs::Pose(*from.vehicle_pose_);
  } else {
    vehicle_pose_ = NULL;
  }
  if (from.has_terrain_pts_sz()) {
    terrain_pts_sz_ = new ::gazebo::msgs::Vector2d(*from.terrain_pts_sz_);
  } else {
    terrain_pts_sz_ = NULL;
  }
  ::memcpy(&elapsed_time_, &from.elapsed_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_agl_) -
    reinterpret_cast<char*>(&elapsed_time_)) + sizeof(average_agl_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.AglDebug)
}

void AglDebug::SharedCtor() {
  ::memset(&vehicle_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_agl_) -
      reinterpret_cast<char*>(&vehicle_pose_)) + sizeof(average_agl_));
}

AglDebug::~AglDebug() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.AglDebug)
  SharedDtor();
}

void AglDebug::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_pose_;
  if (this != internal_default_instance()) delete terrain_pts_sz_;
}

void AglDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AglDebug::descriptor() {
  ::protobuf_agl_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agl_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AglDebug& AglDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_agl_5fdebug_2eproto::scc_info_AglDebug.base);
  return *internal_default_instance();
}


void AglDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.AglDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terrain_pts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_pose_ != NULL);
      vehicle_pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(terrain_pts_sz_ != NULL);
      terrain_pts_sz_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&elapsed_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_agl_) -
        reinterpret_cast<char*>(&elapsed_time_)) + sizeof(average_agl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AglDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.AglDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double elapsed_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_elapsed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elapsed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Pose vehicle_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double current_agl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_current_agl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_agl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double average_agl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_average_agl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_agl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terrain_pts_sz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_terrain_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.AglDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.AglDebug)
  return false;
#undef DO_
}

void AglDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.AglDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double elapsed_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->elapsed_time(), output);
  }

  // required .gazebo.msgs.Pose vehicle_pose = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vehicle_pose(), output);
  }

  // required double current_agl = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->current_agl(), output);
  }

  // required double average_agl = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->average_agl(), output);
  }

  // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_terrain_pts_sz(), output);
  }

  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->terrain_pts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->terrain_pts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.AglDebug)
}

::google::protobuf::uint8* AglDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.AglDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double elapsed_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->elapsed_time(), target);
  }

  // required .gazebo.msgs.Pose vehicle_pose = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vehicle_pose(), deterministic, target);
  }

  // required double current_agl = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->current_agl(), target);
  }

  // required double average_agl = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->average_agl(), target);
  }

  // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_terrain_pts_sz(), deterministic, target);
  }

  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->terrain_pts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->terrain_pts(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.AglDebug)
  return target;
}

size_t AglDebug::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.AglDebug)
  size_t total_size = 0;

  if (has_vehicle_pose()) {
    // required .gazebo.msgs.Pose vehicle_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_pose_);
  }

  if (has_terrain_pts_sz()) {
    // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *terrain_pts_sz_);
  }

  if (has_elapsed_time()) {
    // required double elapsed_time = 1;
    total_size += 1 + 8;
  }

  if (has_current_agl()) {
    // required double current_agl = 3;
    total_size += 1 + 8;
  }

  if (has_average_agl()) {
    // required double average_agl = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t AglDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.AglDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Pose vehicle_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vehicle_pose_);

    // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *terrain_pts_sz_);

    // required double elapsed_time = 1;
    total_size += 1 + 8;

    // required double current_agl = 3;
    total_size += 1 + 8;

    // required double average_agl = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->terrain_pts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->terrain_pts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AglDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.AglDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const AglDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AglDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.AglDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.AglDebug)
    MergeFrom(*source);
  }
}

void AglDebug::MergeFrom(const AglDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.AglDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terrain_pts_.MergeFrom(from.terrain_pts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vehicle_pose()->::gazebo::msgs::Pose::MergeFrom(from.vehicle_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_terrain_pts_sz()->::gazebo::msgs::Vector2d::MergeFrom(from.terrain_pts_sz());
    }
    if (cached_has_bits & 0x00000004u) {
      elapsed_time_ = from.elapsed_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_agl_ = from.current_agl_;
    }
    if (cached_has_bits & 0x00000010u) {
      average_agl_ = from.average_agl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AglDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.AglDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AglDebug::CopyFrom(const AglDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.AglDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AglDebug::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->terrain_pts())) return false;
  if (has_vehicle_pose()) {
    if (!this->vehicle_pose_->IsInitialized()) return false;
  }
  if (has_terrain_pts_sz()) {
    if (!this->terrain_pts_sz_->IsInitialized()) return false;
  }
  return true;
}

void AglDebug::Swap(AglDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AglDebug::InternalSwap(AglDebug* other) {
  using std::swap;
  CastToBase(&terrain_pts_)->InternalSwap(CastToBase(&other->terrain_pts_));
  swap(vehicle_pose_, other->vehicle_pose_);
  swap(terrain_pts_sz_, other->terrain_pts_sz_);
  swap(elapsed_time_, other->elapsed_time_);
  swap(current_agl_, other->current_agl_);
  swap(average_agl_, other->average_agl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AglDebug::GetMetadata() const {
  protobuf_agl_5fdebug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_agl_5fdebug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gazebo::msgs::AglDebug* Arena::CreateMaybeMessage< ::gazebo::msgs::AglDebug >(Arena* arena) {
  return Arena::CreateInternal< ::gazebo::msgs::AglDebug >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
