// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agl_debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agl_debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* AglDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AglDebug_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_agl_5fdebug_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_agl_5fdebug_2eproto() {
  protobuf_AddDesc_agl_5fdebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agl_debug.proto");
  GOOGLE_CHECK(file != NULL);
  AglDebug_descriptor_ = file->message_type(0);
  static const int AglDebug_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, elapsed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, vehicle_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, current_agl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, average_agl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, terrain_pts_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, terrain_pts_),
  };
  AglDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AglDebug_descriptor_,
      AglDebug::default_instance_,
      AglDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(AglDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AglDebug, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agl_5fdebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AglDebug_descriptor_, &AglDebug::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agl_5fdebug_2eproto() {
  delete AglDebug::default_instance_;
  delete AglDebug_reflection_;
}

void protobuf_AddDesc_agl_5fdebug_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_agl_5fdebug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_vector2d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017agl_debug.proto\022\013gazebo.msgs\032\npose.pro"
    "to\032\016vector3d.proto\032\016vector2d.proto\032\ntime"
    ".proto\"\316\001\n\010AglDebug\022\024\n\014elapsed_time\030\001 \002("
    "\001\022\'\n\014vehicle_pose\030\002 \002(\0132\021.gazebo.msgs.Po"
    "se\022\023\n\013current_agl\030\003 \002(\001\022\023\n\013average_agl\030\004"
    " \002(\001\022-\n\016terrain_pts_sz\030\005 \002(\0132\025.gazebo.ms"
    "gs.Vector2d\022*\n\013terrain_pts\030\006 \003(\0132\025.gazeb"
    "o.msgs.Vector3d", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agl_debug.proto", &protobuf_RegisterTypes);
  AglDebug::default_instance_ = new AglDebug();
  AglDebug::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agl_5fdebug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agl_5fdebug_2eproto {
  StaticDescriptorInitializer_agl_5fdebug_2eproto() {
    protobuf_AddDesc_agl_5fdebug_2eproto();
  }
} static_descriptor_initializer_agl_5fdebug_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AglDebug::kElapsedTimeFieldNumber;
const int AglDebug::kVehiclePoseFieldNumber;
const int AglDebug::kCurrentAglFieldNumber;
const int AglDebug::kAverageAglFieldNumber;
const int AglDebug::kTerrainPtsSzFieldNumber;
const int AglDebug::kTerrainPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AglDebug::AglDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.AglDebug)
}

void AglDebug::InitAsDefaultInstance() {
  vehicle_pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
  terrain_pts_sz_ = const_cast< ::gazebo::msgs::Vector2d*>(&::gazebo::msgs::Vector2d::default_instance());
}

AglDebug::AglDebug(const AglDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.AglDebug)
}

void AglDebug::SharedCtor() {
  _cached_size_ = 0;
  elapsed_time_ = 0;
  vehicle_pose_ = NULL;
  current_agl_ = 0;
  average_agl_ = 0;
  terrain_pts_sz_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AglDebug::~AglDebug() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.AglDebug)
  SharedDtor();
}

void AglDebug::SharedDtor() {
  if (this != default_instance_) {
    delete vehicle_pose_;
    delete terrain_pts_sz_;
  }
}

void AglDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AglDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AglDebug_descriptor_;
}

const AglDebug& AglDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agl_5fdebug_2eproto();
  return *default_instance_;
}

AglDebug* AglDebug::default_instance_ = NULL;

AglDebug* AglDebug::New(::google::protobuf::Arena* arena) const {
  AglDebug* n = new AglDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AglDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.AglDebug)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AglDebug, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AglDebug*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(current_agl_, average_agl_);
    elapsed_time_ = 0;
    if (has_vehicle_pose()) {
      if (vehicle_pose_ != NULL) vehicle_pose_->::gazebo::msgs::Pose::Clear();
    }
    if (has_terrain_pts_sz()) {
      if (terrain_pts_sz_ != NULL) terrain_pts_sz_->::gazebo::msgs::Vector2d::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  terrain_pts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AglDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.AglDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double elapsed_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elapsed_time_)));
          set_has_elapsed_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_pose;
        break;
      }

      // required .gazebo.msgs.Pose vehicle_pose = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_current_agl;
        break;
      }

      // required double current_agl = 3;
      case 3: {
        if (tag == 25) {
         parse_current_agl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_agl_)));
          set_has_current_agl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_average_agl;
        break;
      }

      // required double average_agl = 4;
      case 4: {
        if (tag == 33) {
         parse_average_agl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_agl_)));
          set_has_average_agl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_terrain_pts_sz;
        break;
      }

      // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
      case 5: {
        if (tag == 42) {
         parse_terrain_pts_sz:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terrain_pts_sz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_terrain_pts;
        break;
      }

      // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
      case 6: {
        if (tag == 50) {
         parse_terrain_pts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_terrain_pts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_terrain_pts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_terrain_pts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.AglDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.AglDebug)
  return false;
#undef DO_
}

void AglDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.AglDebug)
  // required double elapsed_time = 1;
  if (has_elapsed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->elapsed_time(), output);
  }

  // required .gazebo.msgs.Pose vehicle_pose = 2;
  if (has_vehicle_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_pose_, output);
  }

  // required double current_agl = 3;
  if (has_current_agl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->current_agl(), output);
  }

  // required double average_agl = 4;
  if (has_average_agl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->average_agl(), output);
  }

  // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
  if (has_terrain_pts_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->terrain_pts_sz_, output);
  }

  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  for (unsigned int i = 0, n = this->terrain_pts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->terrain_pts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.AglDebug)
}

::google::protobuf::uint8* AglDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.AglDebug)
  // required double elapsed_time = 1;
  if (has_elapsed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->elapsed_time(), target);
  }

  // required .gazebo.msgs.Pose vehicle_pose = 2;
  if (has_vehicle_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehicle_pose_, false, target);
  }

  // required double current_agl = 3;
  if (has_current_agl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->current_agl(), target);
  }

  // required double average_agl = 4;
  if (has_average_agl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->average_agl(), target);
  }

  // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
  if (has_terrain_pts_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->terrain_pts_sz_, false, target);
  }

  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  for (unsigned int i = 0, n = this->terrain_pts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->terrain_pts(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.AglDebug)
  return target;
}

int AglDebug::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.AglDebug)
  int total_size = 0;

  if (has_elapsed_time()) {
    // required double elapsed_time = 1;
    total_size += 1 + 8;
  }

  if (has_vehicle_pose()) {
    // required .gazebo.msgs.Pose vehicle_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_pose_);
  }

  if (has_current_agl()) {
    // required double current_agl = 3;
    total_size += 1 + 8;
  }

  if (has_average_agl()) {
    // required double average_agl = 4;
    total_size += 1 + 8;
  }

  if (has_terrain_pts_sz()) {
    // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terrain_pts_sz_);
  }

  return total_size;
}
int AglDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.AglDebug)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double elapsed_time = 1;
    total_size += 1 + 8;

    // required .gazebo.msgs.Pose vehicle_pose = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vehicle_pose_);

    // required double current_agl = 3;
    total_size += 1 + 8;

    // required double average_agl = 4;
    total_size += 1 + 8;

    // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->terrain_pts_sz_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  total_size += 1 * this->terrain_pts_size();
  for (int i = 0; i < this->terrain_pts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terrain_pts(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AglDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.AglDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AglDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AglDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.AglDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.AglDebug)
    MergeFrom(*source);
  }
}

void AglDebug::MergeFrom(const AglDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.AglDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  terrain_pts_.MergeFrom(from.terrain_pts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elapsed_time()) {
      set_elapsed_time(from.elapsed_time());
    }
    if (from.has_vehicle_pose()) {
      mutable_vehicle_pose()->::gazebo::msgs::Pose::MergeFrom(from.vehicle_pose());
    }
    if (from.has_current_agl()) {
      set_current_agl(from.current_agl());
    }
    if (from.has_average_agl()) {
      set_average_agl(from.average_agl());
    }
    if (from.has_terrain_pts_sz()) {
      mutable_terrain_pts_sz()->::gazebo::msgs::Vector2d::MergeFrom(from.terrain_pts_sz());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AglDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.AglDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AglDebug::CopyFrom(const AglDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.AglDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AglDebug::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_vehicle_pose()) {
    if (!this->vehicle_pose_->IsInitialized()) return false;
  }
  if (has_terrain_pts_sz()) {
    if (!this->terrain_pts_sz_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->terrain_pts())) return false;
  return true;
}

void AglDebug::Swap(AglDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AglDebug::InternalSwap(AglDebug* other) {
  std::swap(elapsed_time_, other->elapsed_time_);
  std::swap(vehicle_pose_, other->vehicle_pose_);
  std::swap(current_agl_, other->current_agl_);
  std::swap(average_agl_, other->average_agl_);
  std::swap(terrain_pts_sz_, other->terrain_pts_sz_);
  terrain_pts_.UnsafeArenaSwap(&other->terrain_pts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AglDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AglDebug_descriptor_;
  metadata.reflection = AglDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AglDebug

// required double elapsed_time = 1;
bool AglDebug::has_elapsed_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AglDebug::set_has_elapsed_time() {
  _has_bits_[0] |= 0x00000001u;
}
void AglDebug::clear_has_elapsed_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void AglDebug::clear_elapsed_time() {
  elapsed_time_ = 0;
  clear_has_elapsed_time();
}
 double AglDebug::elapsed_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.elapsed_time)
  return elapsed_time_;
}
 void AglDebug::set_elapsed_time(double value) {
  set_has_elapsed_time();
  elapsed_time_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.elapsed_time)
}

// required .gazebo.msgs.Pose vehicle_pose = 2;
bool AglDebug::has_vehicle_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AglDebug::set_has_vehicle_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void AglDebug::clear_has_vehicle_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void AglDebug::clear_vehicle_pose() {
  if (vehicle_pose_ != NULL) vehicle_pose_->::gazebo::msgs::Pose::Clear();
  clear_has_vehicle_pose();
}
const ::gazebo::msgs::Pose& AglDebug::vehicle_pose() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.vehicle_pose)
  return vehicle_pose_ != NULL ? *vehicle_pose_ : *default_instance_->vehicle_pose_;
}
::gazebo::msgs::Pose* AglDebug::mutable_vehicle_pose() {
  set_has_vehicle_pose();
  if (vehicle_pose_ == NULL) {
    vehicle_pose_ = new ::gazebo::msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.vehicle_pose)
  return vehicle_pose_;
}
::gazebo::msgs::Pose* AglDebug::release_vehicle_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.AglDebug.vehicle_pose)
  clear_has_vehicle_pose();
  ::gazebo::msgs::Pose* temp = vehicle_pose_;
  vehicle_pose_ = NULL;
  return temp;
}
void AglDebug::set_allocated_vehicle_pose(::gazebo::msgs::Pose* vehicle_pose) {
  delete vehicle_pose_;
  vehicle_pose_ = vehicle_pose;
  if (vehicle_pose) {
    set_has_vehicle_pose();
  } else {
    clear_has_vehicle_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.AglDebug.vehicle_pose)
}

// required double current_agl = 3;
bool AglDebug::has_current_agl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AglDebug::set_has_current_agl() {
  _has_bits_[0] |= 0x00000004u;
}
void AglDebug::clear_has_current_agl() {
  _has_bits_[0] &= ~0x00000004u;
}
void AglDebug::clear_current_agl() {
  current_agl_ = 0;
  clear_has_current_agl();
}
 double AglDebug::current_agl() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.current_agl)
  return current_agl_;
}
 void AglDebug::set_current_agl(double value) {
  set_has_current_agl();
  current_agl_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.current_agl)
}

// required double average_agl = 4;
bool AglDebug::has_average_agl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AglDebug::set_has_average_agl() {
  _has_bits_[0] |= 0x00000008u;
}
void AglDebug::clear_has_average_agl() {
  _has_bits_[0] &= ~0x00000008u;
}
void AglDebug::clear_average_agl() {
  average_agl_ = 0;
  clear_has_average_agl();
}
 double AglDebug::average_agl() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.average_agl)
  return average_agl_;
}
 void AglDebug::set_average_agl(double value) {
  set_has_average_agl();
  average_agl_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.average_agl)
}

// required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
bool AglDebug::has_terrain_pts_sz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AglDebug::set_has_terrain_pts_sz() {
  _has_bits_[0] |= 0x00000010u;
}
void AglDebug::clear_has_terrain_pts_sz() {
  _has_bits_[0] &= ~0x00000010u;
}
void AglDebug::clear_terrain_pts_sz() {
  if (terrain_pts_sz_ != NULL) terrain_pts_sz_->::gazebo::msgs::Vector2d::Clear();
  clear_has_terrain_pts_sz();
}
const ::gazebo::msgs::Vector2d& AglDebug::terrain_pts_sz() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.terrain_pts_sz)
  return terrain_pts_sz_ != NULL ? *terrain_pts_sz_ : *default_instance_->terrain_pts_sz_;
}
::gazebo::msgs::Vector2d* AglDebug::mutable_terrain_pts_sz() {
  set_has_terrain_pts_sz();
  if (terrain_pts_sz_ == NULL) {
    terrain_pts_sz_ = new ::gazebo::msgs::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.terrain_pts_sz)
  return terrain_pts_sz_;
}
::gazebo::msgs::Vector2d* AglDebug::release_terrain_pts_sz() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.AglDebug.terrain_pts_sz)
  clear_has_terrain_pts_sz();
  ::gazebo::msgs::Vector2d* temp = terrain_pts_sz_;
  terrain_pts_sz_ = NULL;
  return temp;
}
void AglDebug::set_allocated_terrain_pts_sz(::gazebo::msgs::Vector2d* terrain_pts_sz) {
  delete terrain_pts_sz_;
  terrain_pts_sz_ = terrain_pts_sz;
  if (terrain_pts_sz) {
    set_has_terrain_pts_sz();
  } else {
    clear_has_terrain_pts_sz();
  }
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.AglDebug.terrain_pts_sz)
}

// repeated .gazebo.msgs.Vector3d terrain_pts = 6;
int AglDebug::terrain_pts_size() const {
  return terrain_pts_.size();
}
void AglDebug::clear_terrain_pts() {
  terrain_pts_.Clear();
}
const ::gazebo::msgs::Vector3d& AglDebug::terrain_pts(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Get(index);
}
::gazebo::msgs::Vector3d* AglDebug::mutable_terrain_pts(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Mutable(index);
}
::gazebo::msgs::Vector3d* AglDebug::add_terrain_pts() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Add();
}
::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
AglDebug::mutable_terrain_pts() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.AglDebug.terrain_pts)
  return &terrain_pts_;
}
const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
AglDebug::terrain_pts() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
