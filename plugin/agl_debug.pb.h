// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agl_debug.proto

#ifndef PROTOBUF_INCLUDED_agl_5fdebug_2eproto
#define PROTOBUF_INCLUDED_agl_5fdebug_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pose.pb.h"
#include "vector3d.pb.h"
#include "vector2d.pb.h"
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_agl_5fdebug_2eproto 

namespace protobuf_agl_5fdebug_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_agl_5fdebug_2eproto
namespace gazebo {
namespace msgs {
class AglDebug;
class AglDebugDefaultTypeInternal;
extern AglDebugDefaultTypeInternal _AglDebug_default_instance_;
}  // namespace msgs
}  // namespace gazebo
namespace google {
namespace protobuf {
template<> ::gazebo::msgs::AglDebug* Arena::CreateMaybeMessage<::gazebo::msgs::AglDebug>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gazebo {
namespace msgs {

// ===================================================================

class AglDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.AglDebug) */ {
 public:
  AglDebug();
  virtual ~AglDebug();

  AglDebug(const AglDebug& from);

  inline AglDebug& operator=(const AglDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AglDebug(AglDebug&& from) noexcept
    : AglDebug() {
    *this = ::std::move(from);
  }

  inline AglDebug& operator=(AglDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AglDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AglDebug* internal_default_instance() {
    return reinterpret_cast<const AglDebug*>(
               &_AglDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AglDebug* other);
  friend void swap(AglDebug& a, AglDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AglDebug* New() const final {
    return CreateMaybeMessage<AglDebug>(NULL);
  }

  AglDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AglDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AglDebug& from);
  void MergeFrom(const AglDebug& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AglDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gazebo.msgs.Vector3d terrain_pts = 6;
  int terrain_pts_size() const;
  void clear_terrain_pts();
  static const int kTerrainPtsFieldNumber = 6;
  ::gazebo::msgs::Vector3d* mutable_terrain_pts(int index);
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
      mutable_terrain_pts();
  const ::gazebo::msgs::Vector3d& terrain_pts(int index) const;
  ::gazebo::msgs::Vector3d* add_terrain_pts();
  const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
      terrain_pts() const;

  // required .gazebo.msgs.Pose vehicle_pose = 2;
  bool has_vehicle_pose() const;
  void clear_vehicle_pose();
  static const int kVehiclePoseFieldNumber = 2;
  private:
  const ::gazebo::msgs::Pose& _internal_vehicle_pose() const;
  public:
  const ::gazebo::msgs::Pose& vehicle_pose() const;
  ::gazebo::msgs::Pose* release_vehicle_pose();
  ::gazebo::msgs::Pose* mutable_vehicle_pose();
  void set_allocated_vehicle_pose(::gazebo::msgs::Pose* vehicle_pose);

  // required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
  bool has_terrain_pts_sz() const;
  void clear_terrain_pts_sz();
  static const int kTerrainPtsSzFieldNumber = 5;
  private:
  const ::gazebo::msgs::Vector2d& _internal_terrain_pts_sz() const;
  public:
  const ::gazebo::msgs::Vector2d& terrain_pts_sz() const;
  ::gazebo::msgs::Vector2d* release_terrain_pts_sz();
  ::gazebo::msgs::Vector2d* mutable_terrain_pts_sz();
  void set_allocated_terrain_pts_sz(::gazebo::msgs::Vector2d* terrain_pts_sz);

  // required double elapsed_time = 1;
  bool has_elapsed_time() const;
  void clear_elapsed_time();
  static const int kElapsedTimeFieldNumber = 1;
  double elapsed_time() const;
  void set_elapsed_time(double value);

  // required double current_agl = 3;
  bool has_current_agl() const;
  void clear_current_agl();
  static const int kCurrentAglFieldNumber = 3;
  double current_agl() const;
  void set_current_agl(double value);

  // required double average_agl = 4;
  bool has_average_agl() const;
  void clear_average_agl();
  static const int kAverageAglFieldNumber = 4;
  double average_agl() const;
  void set_average_agl(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.AglDebug)
 private:
  void set_has_elapsed_time();
  void clear_has_elapsed_time();
  void set_has_vehicle_pose();
  void clear_has_vehicle_pose();
  void set_has_current_agl();
  void clear_has_current_agl();
  void set_has_average_agl();
  void clear_has_average_agl();
  void set_has_terrain_pts_sz();
  void clear_has_terrain_pts_sz();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d > terrain_pts_;
  ::gazebo::msgs::Pose* vehicle_pose_;
  ::gazebo::msgs::Vector2d* terrain_pts_sz_;
  double elapsed_time_;
  double current_agl_;
  double average_agl_;
  friend struct ::protobuf_agl_5fdebug_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AglDebug

// required double elapsed_time = 1;
inline bool AglDebug::has_elapsed_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AglDebug::set_has_elapsed_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AglDebug::clear_has_elapsed_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AglDebug::clear_elapsed_time() {
  elapsed_time_ = 0;
  clear_has_elapsed_time();
}
inline double AglDebug::elapsed_time() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.elapsed_time)
  return elapsed_time_;
}
inline void AglDebug::set_elapsed_time(double value) {
  set_has_elapsed_time();
  elapsed_time_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.elapsed_time)
}

// required .gazebo.msgs.Pose vehicle_pose = 2;
inline bool AglDebug::has_vehicle_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AglDebug::set_has_vehicle_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AglDebug::clear_has_vehicle_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gazebo::msgs::Pose& AglDebug::_internal_vehicle_pose() const {
  return *vehicle_pose_;
}
inline const ::gazebo::msgs::Pose& AglDebug::vehicle_pose() const {
  const ::gazebo::msgs::Pose* p = vehicle_pose_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.vehicle_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline ::gazebo::msgs::Pose* AglDebug::release_vehicle_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.AglDebug.vehicle_pose)
  clear_has_vehicle_pose();
  ::gazebo::msgs::Pose* temp = vehicle_pose_;
  vehicle_pose_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Pose* AglDebug::mutable_vehicle_pose() {
  set_has_vehicle_pose();
  if (vehicle_pose_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaNoVirtual());
    vehicle_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.vehicle_pose)
  return vehicle_pose_;
}
inline void AglDebug::set_allocated_vehicle_pose(::gazebo::msgs::Pose* vehicle_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vehicle_pose_);
  }
  if (vehicle_pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vehicle_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vehicle_pose, submessage_arena);
    }
    set_has_vehicle_pose();
  } else {
    clear_has_vehicle_pose();
  }
  vehicle_pose_ = vehicle_pose;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.AglDebug.vehicle_pose)
}

// required double current_agl = 3;
inline bool AglDebug::has_current_agl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AglDebug::set_has_current_agl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AglDebug::clear_has_current_agl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AglDebug::clear_current_agl() {
  current_agl_ = 0;
  clear_has_current_agl();
}
inline double AglDebug::current_agl() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.current_agl)
  return current_agl_;
}
inline void AglDebug::set_current_agl(double value) {
  set_has_current_agl();
  current_agl_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.current_agl)
}

// required double average_agl = 4;
inline bool AglDebug::has_average_agl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AglDebug::set_has_average_agl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AglDebug::clear_has_average_agl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AglDebug::clear_average_agl() {
  average_agl_ = 0;
  clear_has_average_agl();
}
inline double AglDebug::average_agl() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.average_agl)
  return average_agl_;
}
inline void AglDebug::set_average_agl(double value) {
  set_has_average_agl();
  average_agl_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.AglDebug.average_agl)
}

// required .gazebo.msgs.Vector2d terrain_pts_sz = 5;
inline bool AglDebug::has_terrain_pts_sz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AglDebug::set_has_terrain_pts_sz() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AglDebug::clear_has_terrain_pts_sz() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector2d& AglDebug::_internal_terrain_pts_sz() const {
  return *terrain_pts_sz_;
}
inline const ::gazebo::msgs::Vector2d& AglDebug::terrain_pts_sz() const {
  const ::gazebo::msgs::Vector2d* p = terrain_pts_sz_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.terrain_pts_sz)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline ::gazebo::msgs::Vector2d* AglDebug::release_terrain_pts_sz() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.AglDebug.terrain_pts_sz)
  clear_has_terrain_pts_sz();
  ::gazebo::msgs::Vector2d* temp = terrain_pts_sz_;
  terrain_pts_sz_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector2d* AglDebug::mutable_terrain_pts_sz() {
  set_has_terrain_pts_sz();
  if (terrain_pts_sz_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    terrain_pts_sz_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.terrain_pts_sz)
  return terrain_pts_sz_;
}
inline void AglDebug::set_allocated_terrain_pts_sz(::gazebo::msgs::Vector2d* terrain_pts_sz) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(terrain_pts_sz_);
  }
  if (terrain_pts_sz) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terrain_pts_sz = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terrain_pts_sz, submessage_arena);
    }
    set_has_terrain_pts_sz();
  } else {
    clear_has_terrain_pts_sz();
  }
  terrain_pts_sz_ = terrain_pts_sz;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.AglDebug.terrain_pts_sz)
}

// repeated .gazebo.msgs.Vector3d terrain_pts = 6;
inline int AglDebug::terrain_pts_size() const {
  return terrain_pts_.size();
}
inline ::gazebo::msgs::Vector3d* AglDebug::mutable_terrain_pts(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >*
AglDebug::mutable_terrain_pts() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.AglDebug.terrain_pts)
  return &terrain_pts_;
}
inline const ::gazebo::msgs::Vector3d& AglDebug::terrain_pts(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Get(index);
}
inline ::gazebo::msgs::Vector3d* AglDebug::add_terrain_pts() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gazebo::msgs::Vector3d >&
AglDebug::terrain_pts() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.AglDebug.terrain_pts)
  return terrain_pts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_agl_5fdebug_2eproto
